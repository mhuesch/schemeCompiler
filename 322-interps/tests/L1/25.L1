(((esi <- 61)  ;; loop termination variable; this is 30 in reality
  (eax <- (allocate esi 3))
  (edi <- eax) ;; save this register for the array base pointer 
  (ebx <- 3)   ;; loop index variable, starts at 1
  
  :loop
  (cjump ebx < esi :keep_going :done)
  :keep_going
  
  ;; compute a[ebx-1], putting it into ecx
  (ecx <- ebx)
  (ecx -= 2)    ;; - decrement by 1.
  (ecx -= 1)    ;; - convert a 2a+1 number into
  (ecx *= 2)    ;;      4a for the index calculation
  (ecx += edi)  ;; - add in the base pointer
  (ecx += 4)    ;; - skip past the size word
  (edx <- ecx)  ;; Store location in edx for later reference
  (ecx <- (mem ecx 0))
  
  ;; double (left shift of 1) ecx
  (ecx <<= 1)
  (ecx -= 1)    ;; Fix number encoding
  
  (edx += 4)    ;; Skip 4 ahead to a[ebx] location
  
  ;; store the 2*a[ebx-1] into a[ebx]
  ((mem edx 0) <- ecx)
  
  ;; increment the loop counter
  (ebx += 2) ;; this is what adding by one is.
  
  ;; go back to the loop test
  (goto :loop)
  
  :done
  (eax <- (print edi))))